import java.util.*;
import java.io.*;

public class lab02_1
{
	/*
	 * Tasks:
	 * 1. main function to take input, ask for word to change, run two functions, then output result
	 * 2. function one: change bracket style
	 * 3. function two: change word
	 */

    public static void main(String[] args) throws RuntimeException
    {
		/*
		 * 1. Ask for fred
		 * 2. Open fred
		 * 3. Ask for word to change
		 * 4. Ask for word to change to
		 * 5. Pass through line changer
		 * 6. Pass through word changer
		 * 7. Output result
		 */

        Scanner in = new Scanner(System.in);
        File fredLocation = null;
        ArrayList<String> fred = null;
        ArrayList<String> newFile = null;
        String wordFrom;
        String wordTo;
        int fails = 0;
        boolean canContinue = false;
        final int MAX_FAILS = 10;

        do
        {
            try
            {
                System.out.print("File location: ");
                fredLocation = new File(in.nextLine());

                fred = fred_parse(fredLocation);
            } catch (FileNotFoundException e)
            {
                System.out.println("Error: File not found. Please try again.");
            } catch (IOException e)
            {
                System.out.println("Error: " + e.toString() + "Trying again.");
                try
                {
                    fred = fred_parse(fredLocation);
                } catch (IOException ex)
                {
                    System.out.println("Error: File Parse failed again with a " + e.toString() + ", try again.");
                }
            } catch (Exception e)
            {
                System.out.println("Error: Somehow, we got a " + e.toString() + ". Try again.");
            }
        } while (fred == null);

        System.out.print("Which word would you like to change?: ");
        wordFrom = in.nextLine();

        System.out.print("Which word would you like to change to?: ");
        wordTo = in.nextLine();

        do
        {
            try
            {
                newFile = change_line(fred);
                newFile = change_word(newFile, wordFrom, wordTo);
                canContinue = true;
            } catch (Exception e)
            {
                System.out.println("Error: Line ending change failed with a " + e.toString() + ". Trying again.");
                if (++fails >= MAX_FAILS)
                {
                    System.out.println("Fatal: Operation has failed too many times.");
                    throw new RuntimeException();
                }
            }
        } while (!canContinue);

        //Output array, then save to new fred
        //Alternatively, rename old fred, then save to original
        File oldLocation = new File(fredLocation.toString() + ".old");
        int i = 1;
        while (oldLocation.exists())
        {
            oldLocation = new File(fredLocation.toString() + ".old" + i++);
        }
        fredLocation.renameTo(oldLocation);
        System.out.println("The old fred has been saved as " + oldLocation.toString());
        i = 0;
        canContinue = false;
        do
        {
            try
            {
                //RandomAccessFile fredOut = new RandomAccessFile(fredLocation, "rw");
                PrintWriter fredOut = new PrintWriter(fredLocation);
                System.out.println("Your fred now reads:\n");
                for (String line : newFile)
                {
                    System.out.println(line);
                    //fredOut.writeUTF(line + "\n");
                    fredOut.write(line + "\n");
                }
                fredOut.close();
                canContinue = true;
            } catch (Exception e)
            {
                if (i++ <= 10)
                {
                    System.out.println("Error: " + e.toString() + ". Trying again.");
                } else
                {
                    System.out.println("Error: complete failure. Reverting changes.");
                    oldLocation.renameTo(fredLocation);
                    break;
                }
            }
        } while (!canContinue);
    }

    public static ArrayList<String> fred_parse(File fredLocation) throws IOException
    {
        RandomAccessFile fredInput = new RandomAccessFile(fredLocation, "r");
        ArrayList<String> fred = new ArrayList<String>();

        String line;
        while ((line = fredInput.readLine()) != null)
        {//Not sure this will work
            fred.add(line);
        }

        fredInput.close();

        return fred;
    }

    public static Boolean odd_quotes(String line)
    {
        int total = 0;
        for (char character : line.toCharArray())
        {
            if (character == '"') {
                total++;
            }
        }
        return total % 2 == 1;
    }

    public static ArrayList<String> change_line(ArrayList<String> fred)
    {//I really hope this works
        String line;
        String[] lines;
        int i = 0;
        String temp;
        String whiteSpace;

        while (i < fred.size())
        {
            line = fred.get(i);
            /* Problems with this version:
                1. Doesn't handle comments, especially not ones ending in
                {
                2. Doesn't tab
                { on newline
                3. Doesn't remove excess whitespace on old line
                4. Multiple
                { on same line
                5.
                { is first char
                Furthermore, something is going wrong with random chars at the beginning of many lines, no idea where that error is coming from
            if (line.endsWith("{"))
                fred.set(i, line.substring(0, line.length()-1));//Remove { from end of line
                fred.add(++i, "{");//Insert newline containing {
            }*/
            if (line.matches("^\\s*(\\/\\{|([^\\s\\/\\{]|\\/[^\\/\\{])(\\/?[^\\/\\{])*\\/?\\{).*$"))
            {//.contains("{"))
                whiteSpace = "";
                for (char character : line.toCharArray())
                {//Copy initial whitespace
                    if (Character.isWhitespace(character))
                    {
                        whiteSpace += character;
                    } else
                    {
                        break;
                    }
                }
                if (line.matches(".*\\{([^\\/]|\\/[^\\/])*\\{.*"))
                {//Multiple {s, need to be careful
                    lines = line.split("\\{");
                    int j = 0;
                    if (odd_quotes(lines[j]))
                    {//Test for quotes
                        temp = lines[j] + "{";
                        while (!odd_quotes(lines[++j]))
                        {
                            temp += lines[j] + "{";
                        }
                        temp += lines[j];
                        if (lines[j].contains("//")){
                            for (++j; j < lines.length; j++)
                            {
                                temp += "{" + lines[j];
                            }
                        }
                        j++;
                        fred.set(i, temp);
                    }
                    else
                    {
                        fred.set(i, lines[0]);
                    }
                    for (; j < lines.length; j++)
                    {
                        if (odd_quotes(lines[j]))
                        {//Test for quotes
                            temp = lines[j] + "{";
                            while (!odd_quotes(lines[++j]))
                            {
                                temp += lines[j] + "{";
                            }
                            temp += lines[j];
                            fred.add(++i, whiteSpace + "{" + temp);
                        }
                        else if (!lines[j].contains("//")) {//Not a comment
                            fred.add(++i, whiteSpace + "{" + lines[j]);
                        }
                        else
                        {//The rest is a comment, no need to make newlines
                            temp = "";
                            for (; j < lines.length - 1; j++)
                            {
                                temp += lines[j] + "{";
                            }
                            temp += lines[j];
                            fred.add(++i, whiteSpace + "{" + temp);
                            //break;
                        }
                    }
                }
                else
                {//Only one {, we can safely ignore comments
                    lines = line.split("\\{", 2);
                    if (odd_quotes(lines[0]))
                    {//test for quotes
                        i++;
                        continue;
                    }
                    fred.set(i, lines[0]);//gets rid of {+
                    if (lines.length < 2)
                    {
                        fred.add(++i, whiteSpace + "{");
                    } else
                    {
                        fred.add(++i, whiteSpace + "{" + lines[1]);//Moves {+ to new line
                    }
                }
            }
            i++;
        }
        return fred;
    }

    public static ArrayList<String> change_word(ArrayList<String> fred, String from, String to)
    {
        for (int i = 0; i < fred.size(); i++)
        {
            //Find all instances of from, change to to
            fred.set(i, fred.get(i).replaceAll(from, to));
        }
        return fred;
    }
}
